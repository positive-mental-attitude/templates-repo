# /backstage-templates/create-atlas-cluster/template.yaml
apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: create-mongodb-atlas-cluster
  title: Create MongoDB Atlas Cluster
  description: Provisions a new MongoDB Atlas cluster by creating a new config repo and a PR to the main ArgoCD repo.
spec:
  owner: platform-team@example.com
  type: service
  parameters:
    - title: Cluster Configuration
      required:
        # - clusterName # This will be used for K8s CR name and new repo suffix
        # - atlasProjectNameK8s
        - clusterNameInAtlas
        - environment
        - providerName
        - regionName
        - instanceSizeName
      properties:
        # clusterName:
        #   title: Cluster Identifier (for K8s CR & New Repo)
        #   type: string
        #   description: Unique identifier for the cluster (e.g., my-app-user-db). Used for K8s CR name and new repo suffix.
        #   pattern: '^[a-z0-9]+(?:-[a-z0-9]+)*$' # Example: lowercase alphanumeric with hyphens
        # atlasProjectNameK8s:
        #   title: Target AtlasProject Kubernetes Name
        #   type: string
        #   description: The 'metadata.name' of the AtlasProject CR to deploy this cluster into (e.g., my-atlas-project-k8s).
        clusterNameInAtlas:
          title: Cluster Name in Atlas UI
          type: string
          description: The name that will appear for this cluster in the MongoDB Atlas UI.
        environment:
          title: Environment
          type: string
          default: development
          enum:
            - development
            - staging
            - production
        providerName:
          title: Cloud Provider
          type: string
          enum: [AWS, GCP, AZURE]
          default: GCP
        regionName:
          title: Region
          type: string
          default: US_EAST_1
        instanceSizeName:
          title: Instance Size
          type: string
          default: M10

  steps:
    - id: fetch-and-template-crd
      name: Fetch Skeleton and Template CRD
      action: fetch:template
      input:
        url: ../atlas-deployment-skeleton # Path to the skeleton file, relative to this template.yaml
        targetPath: atlas-crds # Output file name in the root of the workspace
        values:
          # clusterName: ${{ parameters.clusterName }} # This will be the metadata.name of the AtlasDeployment CR
          # atlasProjectNameK8s: ${{ parameters.atlasProjectNameK8s }}
          clusterNameInAtlas: ${{ parameters.clusterNameInAtlas }}
          environment: ${{ parameters.environment }}
          providerName: ${{ parameters.providerName }}
          regionName: ${{ parameters.regionName }}
          instanceSizeName: ${{ parameters.instanceSizeName }}

    - id: publish-new-config-repo
      name: Create New GitHub Repo for Cluster Config
      action: publish:github
      input:
        allowedHosts: ['github.com']
        description: 'Configuration repository for Atlas cluster: ${{ parameters.clusterNameInAtlas }}'
        # Creates a new repository like 'positive-mental-attitude/my-app-user-db-config'
        repoUrl: 'github.com?owner=positive-mental-attitude&repo=${{ parameters.clusterNameInAtlas }}-config'
        # repoVisibility: 'private' # Or 'public'
        commitMessage: 'Initial commit: AtlasDeployment CRD for ${{ parameters.clusterNameInAtlas }}'
        # sourcePath: . # Commit the generated CRD to the root of this new repo

    - id: create-pr-to-argocd-repo
      name: Create Pull Request to ArgoCD Watched Repo
      action: publish:github:pull-request
      input:
        repoUrl: 'github.com?owner=positive-mental-attitude&repo=templates-repo' # Your main ArgoCD-watched repo
        branchName: feat/add-cluster-${{ parameters.clusterNameInAtlas }} # Branch for the PR in templates-repo
        title: 'feat: Request to add Atlas cluster - ${{ parameters.clusterNameInAtlas }}'
        description: |
          Please review and merge this Pull Request to add the AtlasDeployment CRD for cluster:
          - Atlas UI Name: `${{ parameters.clusterNameInAtlas }}`
          - Environment: `${{ parameters.environment }}`

          This CRD will be deployed to the `/atlas-crds/` directory.
          The full configuration is also available in its dedicated repository: ${{ steps['publish-new-config-repo'].output.remoteUrl }}
        # The content for the PR comes from the workspace.
        # We need to ensure the file we want to PR is correctly placed for this action.
        # The `publish:github:pull-request` action typically takes the content of the entire workspace
        # or a specified sub-directory and proposes it as changes to the target repo.
        # Here, we want to commit the single generated CRD file into a specific directory.
        # For this, we need to ensure the sourcePath for the PR content is correct.
        # The file `${{ parameters.clusterName }}.yaml` is already in the workspace root from the previous step.
        # We'll define its target path in the PR.
        # sourcePath: ${{ parameters.clusterName }}-deployment.yaml # The generated CRD from 'fetch-and-template-crd' step
        # targetPath: atlas-crds/${{ parameters.clusterName }}.yaml # Where this file should go in the PR to templates-repo
        # commitMessage: 'feat: Add AtlasDeployment CRD for ${{ parameters.clusterNameInAtlas }}' # Optional, action generates one

  output:
    links:
      - title: View New Config Repository
        url: ${{ steps['publish-new-config-repo'].output.remoteUrl }}
      - title: View Pull Request
        url: ${{ steps['create-pr-to-argocd-repo'].output.remoteUrl }}